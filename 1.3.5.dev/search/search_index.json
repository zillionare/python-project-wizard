{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Project Wizard \u00b6 A tool for creating skeleton python project, built with popular develop tools and conform to the best practice. Features \u00b6 This tool will create Python project with the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing with Pytest (unittest is still supported out of the box) Code coverage report and endorsed by Codecov Tox : Test your code against environment matrix, lint and artifact check. Format with Black and Isort Lint code with Flake8 and Flake8-docstrings Pre-commit hooks : Formatting/linting anytime when commit/run local tox/CI Mkdocstrings : Auto API doc generation and docstring template (vscode and its extension autodocStrings is required) Command line interface using Python Fire (optional) Continuouse Integration/Deployment by github actions , includes: publish dev build/official release to TestPyPI/PyPI automatically when CI success publish documents automatically when CI success extract change log from github and integrate with release notes automatically Host your documentation from Git Pages with zero-config Support multiple versions of documentations (by mike ) Create repo and push initial commits by repo.sh script Quickstart \u00b6 Install ppw if you haven't install it yet: 1 pip install -U ppw Generate a Python package project by simple run: 1 ppw Then follow the Tutorial to finish configurations. Credits \u00b6 This repo is forked from audreyr/cookiecutter-pypackage , and borrowed some ideas from briggySmalls Links \u00b6 cfg4py \u00b6 cfg4py is a great tool for managing configuration files, supporting configuration for different environments (dev, prodction and test), automatically converting yaml-based configuration to python class, so, you can access configuration items by attribute, thus, enable auto-completion (by IDE). It also supports live-reload, remoting central configuration, config template and more.","title":"Introduction"},{"location":"#python-project-wizard","text":"A tool for creating skeleton python project, built with popular develop tools and conform to the best practice.","title":"Python Project Wizard"},{"location":"#features","text":"This tool will create Python project with the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing with Pytest (unittest is still supported out of the box) Code coverage report and endorsed by Codecov Tox : Test your code against environment matrix, lint and artifact check. Format with Black and Isort Lint code with Flake8 and Flake8-docstrings Pre-commit hooks : Formatting/linting anytime when commit/run local tox/CI Mkdocstrings : Auto API doc generation and docstring template (vscode and its extension autodocStrings is required) Command line interface using Python Fire (optional) Continuouse Integration/Deployment by github actions , includes: publish dev build/official release to TestPyPI/PyPI automatically when CI success publish documents automatically when CI success extract change log from github and integrate with release notes automatically Host your documentation from Git Pages with zero-config Support multiple versions of documentations (by mike ) Create repo and push initial commits by repo.sh script","title":"Features"},{"location":"#quickstart","text":"Install ppw if you haven't install it yet: 1 pip install -U ppw Generate a Python package project by simple run: 1 ppw Then follow the Tutorial to finish configurations.","title":"Quickstart"},{"location":"#credits","text":"This repo is forked from audreyr/cookiecutter-pypackage , and borrowed some ideas from briggySmalls","title":"Credits"},{"location":"#links","text":"","title":"Links"},{"location":"#cfg4py","text":"cfg4py is a great tool for managing configuration files, supporting configuration for different environments (dev, prodction and test), automatically converting yaml-based configuration to python class, so, you can access configuration items by attribute, thus, enable auto-completion (by IDE). It also supports live-reload, remoting central configuration, config template and more.","title":"cfg4py"},{"location":"console_script_setup/","text":"Console Script Setup \u00b6 Optionally, your package can include a console script using Fire How It Works \u00b6 If the command_line_interface option is set to fire during setup, cookiecutter will add a file cli.py in the project_slug subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py. Usage \u00b6 To use the console script in development: 1 poetry install projectdir should be the top level project directory with the pyproject.toml file Then execute: 1 $your_package_name help it will show your package name, project short description and exit. More Details \u00b6 You can read more about Python Fire at Fire","title":"Console script"},{"location":"console_script_setup/#console-script-setup","text":"Optionally, your package can include a console script using Fire","title":"Console Script Setup"},{"location":"console_script_setup/#how-it-works","text":"If the command_line_interface option is set to fire during setup, cookiecutter will add a file cli.py in the project_slug subdirectory. An entry point is added to pyproject.toml that points to the main function in cli.py.","title":"How It Works"},{"location":"console_script_setup/#usage","text":"To use the console script in development: 1 poetry install projectdir should be the top level project directory with the pyproject.toml file Then execute: 1 $your_package_name help it will show your package name, project short description and exit.","title":"Usage"},{"location":"console_script_setup/#more-details","text":"You can read more about Python Fire at Fire","title":"More Details"},{"location":"faq/","text":"Question Why not travis CI? \u00b6 Travis CI is a great service, however, github actions is super convenient, less configuration , better integration. Less configuration, less error prone. Question Why not read the docs? \u00b6 Same reason as above. Git pages is convenient than read the docs, it requires no further configuration, except access token. As to read the docs, you need to write v2 config file, plus several settings on web pages. Question Why mkdocs instead of sphinx? \u00b6 reStructured Text and Sphinx is way to tedious, though powerful. With extension, you'll find almost all features are available in mkdocs, in a neat and productive way. Poetry and Markdown, are the two key factors driven me develop this template. Question How to trigger a release build? \u00b6 Once you've tagged either of (main, master) branch with v (for example, v1.0), then github actions will trigger a release build and finally publish documentation to https://{your_github_account}.github.io/{your_repo_slug} and push a wheels to pypi. You can also manually trigger this one: 1 2 git tag -a v1.0 -m \"Release v1.0\" git push --tags then check on github to see if actions is executing. Once it's done successfully. Question How to manually publish documentation? \u00b6 By default, every push to github will trigger a documentation dev build, with the name is ${poetry version --short}-dev. And every tag starts with 'v' on main/master branch will cause a release build, and documentation will be built too. However, by any chances, you can manually build and publish your documentation with: 1 2 poetry run mike deploy -p `poetry version --short` poetry run mike set-default -p `poetry version --short` The above commands simply build documentation locally and push to github, then github will publish it. Question What are the configuration items? \u00b6 Here is a list: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 ## Templated Values The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. release_date The date of the first release. pypi_username Your Python Package Index account username. year The year of the initial package copyright in the license file. version The starting version number of the package. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of `google, numpy, rst`. It's required by flake8-docstrings. ## Options The following package configuration options set up different features for your project. command_line_interface Whether to create a console script using Python Fire. Console script entry point will match the project_slug. Options: \\['fire', \"No command-line interface\"\\] except above settings, for CI/CD, you'll also need configure gitub repsitory secrets at page repo > settings > secrtes, and add the following secrets: PERSONAL_TOKEN (required for publishing document to git pages) TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi) PYPI_API_TOKEN (required for publish )","title":"FAQ"},{"location":"faq/#why-not-travis-ci","text":"Travis CI is a great service, however, github actions is super convenient, less configuration , better integration. Less configuration, less error prone. Question","title":"Why not travis CI?"},{"location":"faq/#why-not-read-the-docs","text":"Same reason as above. Git pages is convenient than read the docs, it requires no further configuration, except access token. As to read the docs, you need to write v2 config file, plus several settings on web pages. Question","title":"Why not read the docs?"},{"location":"faq/#why-mkdocs-instead-of-sphinx","text":"reStructured Text and Sphinx is way to tedious, though powerful. With extension, you'll find almost all features are available in mkdocs, in a neat and productive way. Poetry and Markdown, are the two key factors driven me develop this template. Question","title":"Why mkdocs instead of sphinx?"},{"location":"faq/#how-to-trigger-a-release-build","text":"Once you've tagged either of (main, master) branch with v (for example, v1.0), then github actions will trigger a release build and finally publish documentation to https://{your_github_account}.github.io/{your_repo_slug} and push a wheels to pypi. You can also manually trigger this one: 1 2 git tag -a v1.0 -m \"Release v1.0\" git push --tags then check on github to see if actions is executing. Once it's done successfully. Question","title":"How to trigger a release build?"},{"location":"faq/#how-to-manually-publish-documentation","text":"By default, every push to github will trigger a documentation dev build, with the name is ${poetry version --short}-dev. And every tag starts with 'v' on main/master branch will cause a release build, and documentation will be built too. However, by any chances, you can manually build and publish your documentation with: 1 2 poetry run mike deploy -p `poetry version --short` poetry run mike set-default -p `poetry version --short` The above commands simply build documentation locally and push to github, then github will publish it. Question","title":"How to manually publish documentation?"},{"location":"faq/#what-are-the-configuration-items","text":"Here is a list: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 ## Templated Values The following appear in various parts of your generated project. full_name Your full name. email Your email address. github_username Your GitHub username. project_name The name of your new Python package project. This is used in documentation, so spaces and any characters are fine here. project_slug The namespace of your Python package. This should be Python import-friendly. Typically, it is the slugified version of project_name. project_short_description A 1-sentence description of what your Python package does. release_date The date of the first release. pypi_username Your Python Package Index account username. year The year of the initial package copyright in the license file. version The starting version number of the package. install_precommit_hooks If you choose yes, then cookiecutter will install pre-commit hooks for you. docstrings_style one of `google, numpy, rst`. It's required by flake8-docstrings. ## Options The following package configuration options set up different features for your project. command_line_interface Whether to create a console script using Python Fire. Console script entry point will match the project_slug. Options: \\['fire', \"No command-line interface\"\\] except above settings, for CI/CD, you'll also need configure gitub repsitory secrets at page repo > settings > secrtes, and add the following secrets: PERSONAL_TOKEN (required for publishing document to git pages) TEST_PYPI_API_TOKEN (required for publishing dev release to testpypi) PYPI_API_TOKEN (required for publish )","title":"What are the configuration items?"},{"location":"history/","text":"History \u00b6 v1.3.3 \u00b6 * #31 Use peotry to create test environment when running tox v1.3.2 \u00b6 #28 Send notification mail whenever build success or failed #27 failed to send build notfication mail due to no from field v1.3.1 \u00b6 * #26 use mike to deploy multiple version of documentation directly, removed github action peaceiris/actions-gh-pages@v3 v1.3 \u00b6 #23 add email notification upon build success #24 config repo secrets by script #25 support create repo and upload source code v1.2.2 \u00b6 #22 mike deploy failed v1.2.1 \u00b6 #21 add environment variable: repo_name and repon_owner v1.2 \u00b6 #7 documentatioin will now support multiple versions #8 add .docstring.tpl to project #10 fixed. #11 fixed. #12 replaced. #13 implemented. Only tested with vscode, please have autodocstrings extension installed. #14 implemented. #15 done. #16 fixed #18 fixed #19 implemented. #20 implemented. You can refer by using ${{ env.package_version_short }} and ${{ env.package_version_full }} now. v1.0 \u00b6 first release with the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing with Pytest (unittest is still supported out of the box) Code coverage report and endorsed by Codecov Tox : Test your code against environment matrix, lint and artifact check. Format with Black and Isort Lint code with Flake8 and Flake8-docstrings Pre-commit hooks : Formatting/linting anytime when commit/run local tox/CI Mkdocstrings : Auto API doc generation Command line interface using Python Fire (optional) Continuouse Integration/Deployment by github actions , includes: publish dev build/official release to TestPyPI/PyPI automatically when CI success publish documents automatically when CI success extract change log from github and integrate with release notes automatically Host your documentation from Git Pages with zero-config","title":"History"},{"location":"history/#history","text":"","title":"History"},{"location":"history/#v133","text":"* #31 Use peotry to create test environment when running tox","title":"v1.3.3"},{"location":"history/#v132","text":"#28 Send notification mail whenever build success or failed #27 failed to send build notfication mail due to no from field","title":"v1.3.2"},{"location":"history/#v131","text":"* #26 use mike to deploy multiple version of documentation directly, removed github action peaceiris/actions-gh-pages@v3","title":"v1.3.1"},{"location":"history/#v13","text":"#23 add email notification upon build success #24 config repo secrets by script #25 support create repo and upload source code","title":"v1.3"},{"location":"history/#v122","text":"#22 mike deploy failed","title":"v1.2.2"},{"location":"history/#v121","text":"#21 add environment variable: repo_name and repon_owner","title":"v1.2.1"},{"location":"history/#v12","text":"#7 documentatioin will now support multiple versions #8 add .docstring.tpl to project #10 fixed. #11 fixed. #12 replaced. #13 implemented. Only tested with vscode, please have autodocstrings extension installed. #14 implemented. #15 done. #16 fixed #18 fixed #19 implemented. #20 implemented. You can refer by using ${{ env.package_version_short }} and ${{ env.package_version_full }} now.","title":"v1.2"},{"location":"history/#v10","text":"first release with the following features: Poetry : Manage version, dependancy, build and release Mkdocs : Writting your docs in markdown style Testing with Pytest (unittest is still supported out of the box) Code coverage report and endorsed by Codecov Tox : Test your code against environment matrix, lint and artifact check. Format with Black and Isort Lint code with Flake8 and Flake8-docstrings Pre-commit hooks : Formatting/linting anytime when commit/run local tox/CI Mkdocstrings : Auto API doc generation Command line interface using Python Fire (optional) Continuouse Integration/Deployment by github actions , includes: publish dev build/official release to TestPyPI/PyPI automatically when CI success publish documents automatically when CI success extract change log from github and integrate with release notes automatically Host your documentation from Git Pages with zero-config","title":"v1.0"},{"location":"pypi_release_checklist/","text":"For Every Release \u00b6 Merge your changes from features/release branch to master/main. Update HISTORY.md Be noticed that github workflow will generate a changelog for you automatically, but you'll have to make your own history.md. Commit the changes: 1 2 git add HISTORY.md git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number (can also be patch or major) 1 poetry patch Run the tests: 1 tox Push the commit to main branch: 1 git push Push the tags, creating the new release on both GitHub and PyPI: 1 2 git tag -a v ` poetry version --short ` -m \"my great release\" git push --tags tag_name has to be started with 'v'(lower case), to leverage github release workflow. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passed, this should be ok, since we have already run twine check during tox test. Info About This Checklist \u00b6 This checklist is adapted from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It's assumed that you are using all features of Python Project Wizard .","title":"Release checklist"},{"location":"pypi_release_checklist/#for-every-release","text":"Merge your changes from features/release branch to master/main. Update HISTORY.md Be noticed that github workflow will generate a changelog for you automatically, but you'll have to make your own history.md. Commit the changes: 1 2 git add HISTORY.md git commit -m \"Changelog for upcoming release 0.1.1.\" Update version number (can also be patch or major) 1 poetry patch Run the tests: 1 tox Push the commit to main branch: 1 git push Push the tags, creating the new release on both GitHub and PyPI: 1 2 git tag -a v ` poetry version --short ` -m \"my great release\" git push --tags tag_name has to be started with 'v'(lower case), to leverage github release workflow. Check the PyPI listing page to make sure that the README, release notes, and roadmap display properly. If tox test passed, this should be ok, since we have already run twine check during tox test. Info","title":"For Every Release"},{"location":"pypi_release_checklist/#about-this-checklist","text":"This checklist is adapted from: https://gist.github.com/audreyr/5990987 https://gist.github.com/audreyr/9f1564ea049c14f682f4 It's assumed that you are using all features of Python Project Wizard .","title":"About This Checklist"},{"location":"tutorial/","text":"Note Did you find this article confusing? Edit this file and pull a request! To start with, you will need GitHub , Pypi , TestPyPi and Codecov account. If you don't have one, please follow the links to apply one before getting started on this tutorial. If you are new to Git and GitHub, you should probably spend a few minutes on some of the tutorials at GitHub Help Step 1: Install Python Project Wizard (ppw) \u00b6 We'll need ppw to generate a skeleton project. Following the instructions to install ppw on to your machine. 1 pip install ppw If virtual environment is used during your developement, install ppw as global. Step 2: Build a virtual environment for your development \u00b6 It's best practice that always developing your project in dedicated python virtual environment. So let's start from creating a virtual environment now: You may choose either annaconda or virtualenv\uff0c annaconda (actually miniconda) is preferred though. 1 2 3 conda create -n mypackage python=3.8 conda activate mypackage conda install -c conda-forge tox-conda Choose python version on your own decision. Be noticed that we're now at a virtual env called mypackage Step 3: Generate Your Package \u00b6 Important Make sure run the following command under mypackage virtual env. Now it's time to generate your Python package. Run the following command and feed with answers: 1 ppw Finally a new folder will be created under current folder, the name is the answer you provided to project_slug . At last step, it'll ask you ppw should performe initialization for you. If the answer is 'yes', then ppw will: install pre-commit hooks install poetry install necessary dependencies which required by test and documentation. These deps will include pytest, tox, mkdocs and etc. lint your files has just been generated. The project layout should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 . \u251c\u2500\u2500 AUTHORS.md \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 .coveragerc \u251c\u2500\u2500 .docstring.tpl \u251c\u2500\u2500 dist \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 api.md \u2502 \u251c\u2500\u2500 authors.md \u2502 \u251c\u2500\u2500 contributing.md \u2502 \u251c\u2500\u2500 history.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 .editorconfig \u251c\u2500\u2500 .flake8 \u251c\u2500\u2500 .github \u2502 \u251c\u2500\u2500 ISSUE_TEMPLATE.md \u2502 \u2514\u2500\u2500 workflows \u2502 \u251c\u2500\u2500 dev.yml \u2502 \u2514\u2500\u2500 release.yml \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 HISTORY.md \u251c\u2500\u2500 .isort.cfg \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 poetry.lock \u251c\u2500\u2500 ppw_0420_01 \u2502 \u251c\u2500\u2500 cli.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 app.py \u251c\u2500\u2500 .pre-commit-config.yaml \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 pyrightconfig.json \u251c\u2500\u2500 README.md \u251c\u2500\u2500 site \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_ppw_0420_01.py \u2514\u2500\u2500 tox.ini Here the project_slug is ppw_0420_01. When you genereate yours, it could be other name. Also be noticed that there's pyproject.toml in this folder. This is the main configuration file of our project. You could choose your favorite python version here. Step 4: Install Dev Requirements \u00b6 Important Skip this step if you've answered 'yes' to the question init_dev_env . They're performed automatically if the answer is 'yes'. You should still be in the folder named as %proejct_slug , which containing the pyproject.toml file. Install the new project's local development requirements inside a virtual environment: 1 2 pip install poetry poetry install -E doc -E dev -E test We started with installing poetry, since the whole project is managed by poetry. Then we installed extra dependency need by developer, such as documentation building tools, lint, formatting and testing tools etc. Step 5: Smoke test \u00b6 Run the following command now: 1 tox This will give you a test report and a lint report. You should see no errors except some lint warnings. Tips Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test might not be shipped. As the developer, you will need install all the dependencies. Tips if you found erros like the following during tox runs: 1 ERROR: InterpreterNotFound: python3.9 don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it). Step 6: Create GitHub Repo \u00b6 Info Going through step 6 and 7 is tedious. So that's why we provide a bash script -- repo.sh, to help creating repo, setting secrets and publishing your code to the repo automatically. The script looks like the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # uncomment the following to create repo and push code to github # gh repo create {{cookiecutter.project_slug}} --public # git remote add origin git@github.com:{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}.git # git add . # pre-commit run --all-files # git add . # git commit -m \"Initial commit by ppw\" # git branch -M main # Uncomment the following to config github secret used by github workflow. # gh secret set PERSONAL_TOKEN --body $GH_TOKEN # gh secret set PYPI_API_TOKEN --body $PYPI_API_TOKEN # gh secret set TEST_PYPI_API_TOKEN --body $TEST_PYPI_API_TOKEN # uncomment the following if you need to setup email notification # gh secret set BUILD_NOTIFY_MAIL_SERVER --body $BUILD_NOTIFY_MAIL_SERVER # gh secret set BUILD_NOTIFY_MAIL_PORT --body $BUILD_NOTIFY_MAIL_PORT # gh secret set BUILD_NOTIFY_MAIL_FROM --body $BUILD_NOTIFY_MAIL_FROM # gh secret set BUILD_NOTIFY_MAIL_PASSWORD --body $BUILD_NOTIFY_MAIL_PASSWORD # gh secret set BUILD_NOTIFY_MAIL_RCPT --body $BUILD_NOTIFY_MAIL_RCPT # git push -u origin main before launch the script, you will need to apply github personal token and set environment variable GH_TOKEN beforehand. And you need install the tool gh too. Go to your GitHub account and create a new repo named mypackage , where mypackage matches the [project_slug] from your answers when running ppw Then goto repo > settings > secrets, click on 'New repository secret', add the following secrets: TEST_PYPI_API_TOKEN, see How to apply testpypi token PYPI_API_TOKEN, see How to apply pypi token PERSONAL_TOKEN, see How to apply personal token Step 7: Upload code to github \u00b6 Back to your develop environment, find the folder named after the [project_slug] . Go to this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 cd mypackage git add . git commit -m \"Initial skeleton.\" git branch -M main git remote add origin git@github.com:myusername/mypackage.git git push -u origin main Where myusername and mypackage are adjusted for your username and package name. You'll need a ssh key to push the repo. You could Generate a key or Add an existing one. Warning if you answered 'yes' to the question if init_dev_env at last step, then you should find pre-commit was invoked when you run git commit , and some files may be modified by hooks. If so, please add these files and commit again . Step 8: Setup codecov integration \u00b6 Tips If you have already setup codecov integration and configured access for all your repositories, you can skip this step. In your browser, visit install codecov app , you'll be landed at this page: Click on the green install button at top right, choose all repositories then click on install button, following directions until all sets. Step 9: Check the CI result \u00b6 After pushing your code to github, go to github web page, navigate to your repo, then click on actions link, you should find screen like this: There should be one workflow running. After it finished, go to [testpyi], check if a new artifact is published under the name {{ cookiecutter.project_slug }} Step 10. Check the documentation \u00b6 Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once: 1 2 3 1. the branch is either main or master 2. the commit is tagged, and the tag name is started with 'v' (lower case) 3. build/testing executed by github CI passed If you'd like to see what it looks like now, you could run the followng command: 1 mkdocs gh-deploy then check your documentation at https://{your_github_account}.github.io/{your_repo} or you can serve it locally by: 1 mkdocs serve -a 0.0.0.0:8000 then open your browser, visit your dev machine on port 8000. Info Though we used mkdocs here, however, in order to support multiple versions of documentation, we actually use mike in github actions. Important ppw choose github pages to host your documentation. you need visit https://github.com/{github_account}/{your_repo}/settings/pages to enable it: the above pages shows example on how to configure it. Step 11. Make an official release \u00b6 After done with your phased development, switch to either of (main, master) branch, following instructions at release checklist , trigger first official release and check result at PYPI . Step 12. Customization \u00b6 ppw assumed some settings for you, for example, it choose python version in pyproject.toml and tox.ini. Change accordingly to match you case. The following section will address how to customize github workflow: You may need to customize settings in workflow. Open .github/workflows/dev.yml: 1 2 3 4 5 6 7 8 9 10 11 jobs: test: # The type of runner that the job will run on strategy: matrix: python-versions: ['3.8',' 3.9', '3.10', '3.11'] # github action doesn't goes well with windows due to docker support # github action doesn't goes well with macos due to `no docker command` #os: [ubuntu-20.04, windows-latest, macos-latest] os: [ubuntu-20.04] runs-on: ${{ matrix.os }} you may need to change python-version and os here. If you need to change python version, make sure never use 3.10 (rather than '3.10'). The former one will is actually equal to 3.1, according to yaml's parser. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 We need run build & publish job on one platform & python version only. So ppw have seperate test job from \"build & publish\" job, and you have to change `runs-on` and `python-version` accordingly too. ``` publish_dev_build: # if test failed, we should not publish needs: test # you may need to change os below runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - uses: actions/setup-python@v4 with: # you may need to change python version below python-version: '3.11' ``` ppw also provide example configuration about how to use service and webhooks (Dingtalk notification robot), but it's disabled by default. Uncomment these lines to enable it: ``` # uncomment the following to pickup services # services: # redis: # image: redis # options: >- # --health-cmd \"redis-cli ping\" # --health-interval 10s # --health-timeout 5s # --health-retries 5 # ports: # - 6379:6379 ``` ``` # - name: Dingtalk Robot Notify # uses: leafney/dingtalk-action@v1.0.0 # env: # DINGTALK_ACCESS_TOKEN: ${{ secrets.DINGTALK_ACCESS_TOKEN }} # DINGTALK_SECRET: ${{ secrets.DINGTALK_SECRET }} # with: # msgtype: markdown # notify_when: 'success' # title: CI Notification | Success # text: | # ### Build success # ${{ env.package_version_full }} is built and published to test pypi # ### Change History # Please check change history at https://${{ env.repo_owner }}.github.io/${{ env.repo_name }}/history # ### package download # Please download the pacakge at: https://test.pypi.org/project/${{ env.repo_name }}/ ```","title":"Tutorial"},{"location":"tutorial/#step-1-install-python-project-wizard-ppw","text":"We'll need ppw to generate a skeleton project. Following the instructions to install ppw on to your machine. 1 pip install ppw If virtual environment is used during your developement, install ppw as global.","title":"Step 1: Install Python Project Wizard (ppw)"},{"location":"tutorial/#step-2-build-a-virtual-environment-for-your-development","text":"It's best practice that always developing your project in dedicated python virtual environment. So let's start from creating a virtual environment now: You may choose either annaconda or virtualenv\uff0c annaconda (actually miniconda) is preferred though. 1 2 3 conda create -n mypackage python=3.8 conda activate mypackage conda install -c conda-forge tox-conda Choose python version on your own decision. Be noticed that we're now at a virtual env called mypackage","title":"Step 2: Build a virtual environment for your development"},{"location":"tutorial/#step-3-generate-your-package","text":"Important Make sure run the following command under mypackage virtual env. Now it's time to generate your Python package. Run the following command and feed with answers: 1 ppw Finally a new folder will be created under current folder, the name is the answer you provided to project_slug . At last step, it'll ask you ppw should performe initialization for you. If the answer is 'yes', then ppw will: install pre-commit hooks install poetry install necessary dependencies which required by test and documentation. These deps will include pytest, tox, mkdocs and etc. lint your files has just been generated. The project layout should look like: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 . \u251c\u2500\u2500 AUTHORS.md \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 .coveragerc \u251c\u2500\u2500 .docstring.tpl \u251c\u2500\u2500 dist \u251c\u2500\u2500 docs \u2502 \u251c\u2500\u2500 api.md \u2502 \u251c\u2500\u2500 authors.md \u2502 \u251c\u2500\u2500 contributing.md \u2502 \u251c\u2500\u2500 history.md \u2502 \u251c\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 installation.md \u2502 \u2514\u2500\u2500 usage.md \u251c\u2500\u2500 .editorconfig \u251c\u2500\u2500 .flake8 \u251c\u2500\u2500 .github \u2502 \u251c\u2500\u2500 ISSUE_TEMPLATE.md \u2502 \u2514\u2500\u2500 workflows \u2502 \u251c\u2500\u2500 dev.yml \u2502 \u2514\u2500\u2500 release.yml \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 HISTORY.md \u251c\u2500\u2500 .isort.cfg \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 poetry.lock \u251c\u2500\u2500 ppw_0420_01 \u2502 \u251c\u2500\u2500 cli.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 app.py \u251c\u2500\u2500 .pre-commit-config.yaml \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 pyrightconfig.json \u251c\u2500\u2500 README.md \u251c\u2500\u2500 site \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 test_ppw_0420_01.py \u2514\u2500\u2500 tox.ini Here the project_slug is ppw_0420_01. When you genereate yours, it could be other name. Also be noticed that there's pyproject.toml in this folder. This is the main configuration file of our project. You could choose your favorite python version here.","title":"Step 3: Generate Your Package"},{"location":"tutorial/#step-4-install-dev-requirements","text":"Important Skip this step if you've answered 'yes' to the question init_dev_env . They're performed automatically if the answer is 'yes'. You should still be in the folder named as %proejct_slug , which containing the pyproject.toml file. Install the new project's local development requirements inside a virtual environment: 1 2 pip install poetry poetry install -E doc -E dev -E test We started with installing poetry, since the whole project is managed by poetry. Then we installed extra dependency need by developer, such as documentation building tools, lint, formatting and testing tools etc.","title":"Step 4: Install Dev Requirements"},{"location":"tutorial/#step-5-smoke-test","text":"Run the following command now: 1 tox This will give you a test report and a lint report. You should see no errors except some lint warnings. Tips Extra dependencies are grouped into three groups, doc, dev and test for better granularity. When you ship the package, dependencies in group doc, dev and test might not be shipped. As the developer, you will need install all the dependencies. Tips if you found erros like the following during tox runs: 1 ERROR: InterpreterNotFound: python3.9 don't be panic, this is just because python3.x is not found on your machine. If you decide to support that version of Python in your package, please install it on your machine. Otherwise, remove it from tox.ini and pyproject.toml (search python3.x then remove it).","title":"Step 5: Smoke test"},{"location":"tutorial/#step-6-create-github-repo","text":"Info Going through step 6 and 7 is tedious. So that's why we provide a bash script -- repo.sh, to help creating repo, setting secrets and publishing your code to the repo automatically. The script looks like the following: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 # uncomment the following to create repo and push code to github # gh repo create {{cookiecutter.project_slug}} --public # git remote add origin git@github.com:{{cookiecutter.github_username}}/{{cookiecutter.project_slug}}.git # git add . # pre-commit run --all-files # git add . # git commit -m \"Initial commit by ppw\" # git branch -M main # Uncomment the following to config github secret used by github workflow. # gh secret set PERSONAL_TOKEN --body $GH_TOKEN # gh secret set PYPI_API_TOKEN --body $PYPI_API_TOKEN # gh secret set TEST_PYPI_API_TOKEN --body $TEST_PYPI_API_TOKEN # uncomment the following if you need to setup email notification # gh secret set BUILD_NOTIFY_MAIL_SERVER --body $BUILD_NOTIFY_MAIL_SERVER # gh secret set BUILD_NOTIFY_MAIL_PORT --body $BUILD_NOTIFY_MAIL_PORT # gh secret set BUILD_NOTIFY_MAIL_FROM --body $BUILD_NOTIFY_MAIL_FROM # gh secret set BUILD_NOTIFY_MAIL_PASSWORD --body $BUILD_NOTIFY_MAIL_PASSWORD # gh secret set BUILD_NOTIFY_MAIL_RCPT --body $BUILD_NOTIFY_MAIL_RCPT # git push -u origin main before launch the script, you will need to apply github personal token and set environment variable GH_TOKEN beforehand. And you need install the tool gh too. Go to your GitHub account and create a new repo named mypackage , where mypackage matches the [project_slug] from your answers when running ppw Then goto repo > settings > secrets, click on 'New repository secret', add the following secrets: TEST_PYPI_API_TOKEN, see How to apply testpypi token PYPI_API_TOKEN, see How to apply pypi token PERSONAL_TOKEN, see How to apply personal token","title":"Step 6: Create GitHub Repo"},{"location":"tutorial/#step-7-upload-code-to-github","text":"Back to your develop environment, find the folder named after the [project_slug] . Go to this folder, and then setup git to use your GitHub repo and upload the code: 1 2 3 4 5 6 7 cd mypackage git add . git commit -m \"Initial skeleton.\" git branch -M main git remote add origin git@github.com:myusername/mypackage.git git push -u origin main Where myusername and mypackage are adjusted for your username and package name. You'll need a ssh key to push the repo. You could Generate a key or Add an existing one. Warning if you answered 'yes' to the question if init_dev_env at last step, then you should find pre-commit was invoked when you run git commit , and some files may be modified by hooks. If so, please add these files and commit again .","title":"Step 7: Upload code to github"},{"location":"tutorial/#step-8-setup-codecov-integration","text":"Tips If you have already setup codecov integration and configured access for all your repositories, you can skip this step. In your browser, visit install codecov app , you'll be landed at this page: Click on the green install button at top right, choose all repositories then click on install button, following directions until all sets.","title":"Step 8: Setup codecov integration"},{"location":"tutorial/#step-9-check-the-ci-result","text":"After pushing your code to github, go to github web page, navigate to your repo, then click on actions link, you should find screen like this: There should be one workflow running. After it finished, go to [testpyi], check if a new artifact is published under the name {{ cookiecutter.project_slug }}","title":"Step 9: Check the CI result"},{"location":"tutorial/#step-10-check-the-documentation","text":"Documentation will be published and available at https://{your_github_account}.github.io/{your_repo} once: 1 2 3 1. the branch is either main or master 2. the commit is tagged, and the tag name is started with 'v' (lower case) 3. build/testing executed by github CI passed If you'd like to see what it looks like now, you could run the followng command: 1 mkdocs gh-deploy then check your documentation at https://{your_github_account}.github.io/{your_repo} or you can serve it locally by: 1 mkdocs serve -a 0.0.0.0:8000 then open your browser, visit your dev machine on port 8000. Info Though we used mkdocs here, however, in order to support multiple versions of documentation, we actually use mike in github actions. Important ppw choose github pages to host your documentation. you need visit https://github.com/{github_account}/{your_repo}/settings/pages to enable it: the above pages shows example on how to configure it.","title":"Step 10. Check the documentation"},{"location":"tutorial/#step-11-make-an-official-release","text":"After done with your phased development, switch to either of (main, master) branch, following instructions at release checklist , trigger first official release and check result at PYPI .","title":"Step 11. Make an official release"},{"location":"tutorial/#step-12-customization","text":"ppw assumed some settings for you, for example, it choose python version in pyproject.toml and tox.ini. Change accordingly to match you case. The following section will address how to customize github workflow: You may need to customize settings in workflow. Open .github/workflows/dev.yml: 1 2 3 4 5 6 7 8 9 10 11 jobs: test: # The type of runner that the job will run on strategy: matrix: python-versions: ['3.8',' 3.9', '3.10', '3.11'] # github action doesn't goes well with windows due to docker support # github action doesn't goes well with macos due to `no docker command` #os: [ubuntu-20.04, windows-latest, macos-latest] os: [ubuntu-20.04] runs-on: ${{ matrix.os }} you may need to change python-version and os here. If you need to change python version, make sure never use 3.10 (rather than '3.10'). The former one will is actually equal to 3.1, according to yaml's parser. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 We need run build & publish job on one platform & python version only. So ppw have seperate test job from \"build & publish\" job, and you have to change `runs-on` and `python-version` accordingly too. ``` publish_dev_build: # if test failed, we should not publish needs: test # you may need to change os below runs-on: ubuntu-latest steps: - uses: actions/checkout@v4 - uses: actions/setup-python@v4 with: # you may need to change python version below python-version: '3.11' ``` ppw also provide example configuration about how to use service and webhooks (Dingtalk notification robot), but it's disabled by default. Uncomment these lines to enable it: ``` # uncomment the following to pickup services # services: # redis: # image: redis # options: >- # --health-cmd \"redis-cli ping\" # --health-interval 10s # --health-timeout 5s # --health-retries 5 # ports: # - 6379:6379 ``` ``` # - name: Dingtalk Robot Notify # uses: leafney/dingtalk-action@v1.0.0 # env: # DINGTALK_ACCESS_TOKEN: ${{ secrets.DINGTALK_ACCESS_TOKEN }} # DINGTALK_SECRET: ${{ secrets.DINGTALK_SECRET }} # with: # msgtype: markdown # notify_when: 'success' # title: CI Notification | Success # text: | # ### Build success # ${{ env.package_version_full }} is built and published to test pypi # ### Change History # Please check change history at https://${{ env.repo_owner }}.github.io/${{ env.repo_name }}/history # ### package download # Please download the pacakge at: https://test.pypi.org/project/${{ env.repo_name }}/ ```","title":"Step 12. Customization"}]}